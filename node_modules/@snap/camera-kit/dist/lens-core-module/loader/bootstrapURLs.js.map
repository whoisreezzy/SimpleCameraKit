{"version":3,"file":"bootstrapURLs.js","sourceRoot":"","sources":["../../../src/lens-core-module/loader/bootstrapURLs.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAC9E,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAE9D,MAAM,UAAU,GAAG,CAAC,wBAAwB,EAAE,0BAA0B,CAAC,CAAC;AAE1E,MAAM,UAAU,cAAc,CAAC,EAAE,IAAI,EAAE,WAAW,EAAgB,EAAE,aAAqB;IAIrF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;IAC7D,IAAI,qBAAqB,IAAI,WAAW,EAAE;QACtC,OAAO,sBAAsB,CAAC;KACjC;SAAM,IAAI,IAAI,EAAE;QACb,OAAO,cAAc,CAAC;KACzB;SAAM;QACH,OAAO,SAAS,CAAC;KACpB;AACL,CAAC;AAaD,MAAM,UAAgB,wBAAwB,CAAC,gBAAyB;;QAEpE,MAAM,QAAQ,GAAG,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEzD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,uBAAuB,EAAE,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,CAAC,KAAK,CAAC;QAEtC,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAC1D,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5B,IAAI,QAAQ;gBAAE,OAAO,GAAG,QAAQ,IAAI,KAAK,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC/D,OAAO,GAAG,MAAM,GAAG,QAAQ,IAAI,OAAO,IAAI,WAAW,IAAI,MAAM,IAAI,KAAK,GAAG,MAAM,EAAE,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;CAAA","sourcesContent":["import type { WasmFeatures } from \"../../platform/platformCapabilities\";\nimport { getPlatformCapabilities } from \"../../platform/platformCapabilities\";\nimport { getPlatformInfo } from \"../../platform/platformInfo\";\n\nconst wasmAssets = [\"LensCoreWebAssembly.js\", \"LensCoreWebAssembly.wasm\"];\n\nexport function getBuildFlavor({ simd, relaxedSimd }: WasmFeatures, versionNumber: string) {\n    // Starting from approx build 282, LensCore now includes relaxed builds.\n    // We need to check for this because we allow customization of Camera Kit\n    // with any LensCore builds, which may not include a relaxed build.\n    const relaxedBuildAvailable = parseInt(versionNumber) >= 282;\n    if (relaxedBuildAvailable && relaxedSimd) {\n        return \"rel-relaxed-simd-neh\";\n    } else if (simd) {\n        return \"rel-simd-neh\";\n    } else {\n        return \"rel-neh\";\n    }\n}\n\n/**\n * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.\n *\n * When CameraKit is used on a website, these URLs must be reachable in order for CameraKit to be successfully\n * bootstrapped.\n *\n * @param endpointOverride Optional endpoint override to load the assets from.\n * @returns An array of asset URLs.\n *\n * @category Bootstrapping and Configuration\n */\nexport async function getRequiredBootstrapURLs(endpointOverride?: string): Promise<string[]> {\n    // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.\n    const endpoint = endpointOverride?.replace(/[\\/]+$/, \"\");\n\n    const { wasm } = await getPlatformCapabilities();\n    if (!wasm.supported) throw wasm.error;\n\n    const { lensCore } = getPlatformInfo();\n    const version = lensCore.version;\n    const buildNumber = lensCore.buildNumber;\n    const flavor = getBuildFlavor(wasm.wasmFeatures, version);\n    return wasmAssets.map((asset) => {\n        if (endpoint) return `${endpoint}/${asset}`;\n        const { origin, pathname, search } = new URL(lensCore.baseUrl);\n        return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;\n    });\n}\n"]}