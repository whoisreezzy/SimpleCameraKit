{"version":3,"file":"frameEvents.js","sourceRoot":"","sources":["../../src/session/frameEvents.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,MAAM,4CAA4C,CAAC;AAE7E,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;AAUxC,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CACxC,aAAa,EACb,CAAC,eAAe,CAAC,KAAK,CAAU,EAChC,CAAC,QAAkB,EAA0B,EAAE;IAC3C,MAAM,kBAAkB,GAAG,IAAI,OAAO,EAAc,CAAC;IACrD,QAAQ;SACH,2BAA2B,CAAC;QACzB,gBAAgB,EAAE,CAAC,UAAU,EAAE,EAAE;YAC7B,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC;KACJ,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CACb,MAAM,CAAC,KAAK,CAAC,8DAA8D,KAAK,CAAC,OAAO,EAAE,CAAC,CAC9F,CAAC;IAEN,OAAO,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC7C,CAAC,CACJ,CAAC","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport type { Observable } from \"rxjs\";\nimport { Subject } from \"rxjs\";\nimport { lensCoreFactory } from \"../lens-core-module/loader/lensCoreFactory\";\nimport type { LensCore } from \"../lens-core-module/lensCore\";\nimport { getLogger } from \"../logger/logger\";\n\nconst logger = getLogger(\"FrameEvents\");\n\nexport interface FrameEvent {\n    processingTimeMs: number;\n}\n\n/**\n * Subscribes to LensCore's frame processed events and emits them as an observable.\n * @internal\n */\nexport const frameEventsFactory = Injectable(\n    \"frameEvents\",\n    [lensCoreFactory.token] as const,\n    (lensCore: LensCore): Observable<FrameEvent> => {\n        const frameEventsSubject = new Subject<FrameEvent>();\n        lensCore\n            .setOnFrameProcessedCallback({\n                onFrameProcessed: (frameEvent) => {\n                    frameEventsSubject.next(frameEvent);\n                },\n            })\n            .catch((error) =>\n                logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`)\n            );\n\n        return frameEventsSubject.asObservable();\n    }\n);\n"]}