{"version":3,"file":"LensPerformanceMetrics.js","sourceRoot":"","sources":["../../src/session/LensPerformanceMetrics.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;AACxE,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAG1E,MAAM,MAAM,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;AAkB7C,MAAM,KAAO,sBAAsB;;;;sBAAtB,sBAAsB;YAK/B,YAAY,WAAmC;gBAJ9B,yBAAoB,iEAAkC;gBAKnE,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;gBACtC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC;oBACtC,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE;wBACjB,IAAI;4BACA,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,EAAE;gCAC1D,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;6BACnD;yBACJ;wBAAC,OAAO,KAAK,EAAE;4BACZ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;yBACvB;oBACL,CAAC;oBACD,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;wBACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACxB,CAAC;iBACJ,CAAC,CAAC;YACP,CAAC;YASD,gBAAgB;gBACZ,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACrE,CAAC;YAED,OAAO;gBACH,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YACpC,CAAC;;;4CAPA,qBAAqB,CAAC,MAAM,CAAC;YAC9B,iMAAA,gBAAgB,wCAEf","sourcesContent":["import type { Observable, Subscription } from \"rxjs\";\nimport { errorLoggingDecorator } from \"../logger/errorLoggingDecorator\";\nimport { getLogger } from \"../logger/logger\";\nimport { LensPerformanceMeasurement } from \"./LensPerformanceMeasurement\";\nimport type { FrameEvent } from \"./frameEvents\";\n\nconst logger = getLogger(\"RenderingMetrics\");\n\n/**\n * Use to measure lens rendering performance.\n *\n * The {@link LensPerformanceMetrics.beginMeasurement} method is used to start measuring rendering performance. After\n * a measurement has begun, performance metrics can be read using {@link LensPerformanceMeasurement}.\n *\n * @example\n * ```ts\n * const measurement = cameraKitSession.metrics.beginMeasurement()\n * // some time later\n * console.log(measurement.measure())\n * ```\n *\n * @category Rendering\n * @category Metrics\n */\nexport class LensPerformanceMetrics {\n    private readonly measurementInstances: Set<LensPerformanceMeasurement>;\n    private readonly subscription: Subscription;\n\n    /** @internal */\n    constructor(frameEvents: Observable<FrameEvent>) {\n        this.measurementInstances = new Set();\n        this.subscription = frameEvents.subscribe({\n            next: (frameEvent) => {\n                try {\n                    for (const measurement of this.measurementInstances.values()) {\n                        measurement.update(frameEvent.processingTimeMs);\n                    }\n                } catch (error) {\n                    logger.error(error);\n                }\n            },\n            error: (error) => {\n                logger.error(error);\n            },\n        });\n    }\n\n    /**\n     * Begin a measurement window, during which time rendering metrics will be gathered.\n     *\n     * @returns A {@link LensPerformanceMeasurement} representing an ongoing measurement of aggregated rendering\n     * metrics, from which specific metrics can be obtained.\n     */\n    @errorLoggingDecorator(logger)\n    beginMeasurement(): LensPerformanceMeasurement {\n        return new LensPerformanceMeasurement(this.measurementInstances);\n    }\n\n    destroy() {\n        this.subscription.unsubscribe();\n    }\n}\n"]}